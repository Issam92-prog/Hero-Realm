#include "Regle.hpp"
#include <iostream>
#include <limits>

// ====== Constructeur ======

Regle::Regle() {
}

// ====== Utilitaires Priv√©s ======

void Regle::afficherSeparateur() {
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
}

void Regle::afficherTitre(const std::string& titre) {
    std::cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << std::endl;
    std::cout << "‚ïë  " << titre;
    // Calculer les espaces pour centrer
    int espaces = 54 - titre.length();
    for (int i = 0; i < espaces; ++i) {
        std::cout << " ";
    }
    std::cout << "‚ïë" << std::endl;
    std::cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << std::endl;
}

void Regle::afficherSection(const std::string& titre, const std::string& icone) {
    std::cout << "\n" << icone << " " << titre << ":" << std::endl;
}

// ====== Affichage Principal ======

void Regle::afficherMenuRegles() {
    std::cout << "\n";
    afficherTitre("üìñ R√àGLES DE HERO REALMS üìñ");

    std::cout << "\n  [1] üìú R√®gles G√©n√©rales" << std::endl;
    std::cout << "  [2] ‚öîÔ∏è  Mode: Chacun pour soi" << std::endl;
    std::cout << "  [3] üé¥ R√®gles de Base (Types de cartes, Phases)" << std::endl;
    std::cout << "  [0] üîô Retour" << std::endl;

    std::cout << "\nChoix: ";
    int choix;
    std::cin >> choix;
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    switch (choix) {
        case 1:
            afficherReglesGenerales();
            break;
        case 2:
            afficherModeChacunPourSoi();
            break;
        case 3:
            afficherReglesBase();
            break;
        default:
            break;
    }

    if (choix != 0) {
        std::cout << "\nAppuyez sur Entr√©e pour continuer...";
        std::cin.get();
    }
}

void Regle::afficherReglesGenerales() {
    std::cout << "\n";
    afficherTitre("üìú R√àGLES G√âN√âRALES üìú");

    afficherSection("üéØ OBJECTIF", "üéØ");
    std::cout << "   R√©duire les points de vie (PV) de tous vos adversaires √† 0.\n";
    std::cout << "   Le dernier joueur en vie remporte la partie !\n";

    afficherSection("‚öôÔ∏è  MISE EN PLACE", "‚öôÔ∏è");
    std::cout << "   ‚Ä¢ Chaque joueur commence avec 50 PV\n";
    std::cout << "   ‚Ä¢ Chaque joueur a un deck de d√©part identique :\n";
    std::cout << "     ‚Üí 7 cartes Or (g√©n√®rent 1 üí∞ or)\n";
    std::cout << "     ‚Üí 3 cartes Dague (g√©n√®rent 1 ‚öîÔ∏è  combat)\n";
    std::cout << "   ‚Ä¢ M√©langez votre deck et piochez selon votre position\n";
    std::cout << "   ‚Ä¢ Placez 5 cartes face visible sur le march√©\n";
    std::cout << "   ‚Ä¢ Les Gemmes de Feu sont toujours disponibles (2 üí∞)\n";

    afficherSection("üé¥ D√âROULEMENT D'UN TOUR", "üé¥");
    std::cout << "   1Ô∏è‚É£  PHASE DE JEU\n";
    std::cout << "      ‚Ä¢ Jouez autant de cartes de votre main que vous voulez\n";
    std::cout << "      ‚Ä¢ Les cartes g√©n√®rent de l'Or üí∞ et du Combat ‚öîÔ∏è\n";
    std::cout << "      ‚Ä¢ Les Champions üë§ restent en jeu\n";
    std::cout << "      ‚Ä¢ Les Actions ‚ö° et Items üî® vont en d√©fausse\n";

    std::cout << "\n   2Ô∏è‚É£  PHASE D'ACHAT\n";
    std::cout << "      ‚Ä¢ Utilisez votre Or üí∞ pour acheter des cartes au march√©\n";
    std::cout << "      ‚Ä¢ Les cartes achet√©es vont dans votre d√©fausse\n";
    std::cout << "      ‚Ä¢ Vous pouvez acheter plusieurs cartes\n";

    std::cout << "\n   3Ô∏è‚É£  PHASE D'ATTAQUE\n";
    std::cout << "      ‚Ä¢ Utilisez votre Combat ‚öîÔ∏è  pour attaquer\n";
    std::cout << "      ‚Ä¢ Attaquez les champions adverses ou les joueurs\n";
    std::cout << "      ‚Ä¢ Les champions Garde üõ°Ô∏è  doivent √™tre vaincus en premier\n";

    std::cout << "\n   4Ô∏è‚É£  FIN DE TOUR\n";
    std::cout << "      ‚Ä¢ D√©faussez toute votre main\n";
    std::cout << "      ‚Ä¢ Votre Or üí∞ et Combat ‚öîÔ∏è  non utilis√©s sont perdus\n";
    std::cout << "      ‚Ä¢ Piochez 5 nouvelles cartes\n";

    afficherSeparateur();
}

void Regle::afficherModeChacunPourSoi() {
    std::cout << "\n";
    afficherTitre("‚öîÔ∏è  MODE: CHACUN POUR SOI ‚öîÔ∏è");

    afficherSection("üìä INFORMATIONS", "üìä");
    std::cout << "   ‚Ä¢ Joueurs: 2 et plus\n";
    std::cout << "   ‚Ä¢ Dur√©e: 20-40 minutes\n";
    std::cout << "   ‚Ä¢ Type: Free-for-all (Chacun contre tous)\n";

    afficherSection("üìú R√àGLES", "üìú");
    std::cout << "   Ceci est le mode de jeu par d√©faut de Hero Realms.\n";

    afficherSection("üé≤ MISE EN PLACE", "üé≤");
    std::cout << "   ‚Ä¢ D√©terminez au hasard qui commencera\n";
    std::cout << "   ‚Ä¢ Jouez chacun dans le sens des aiguilles d'une montre\n";

    afficherSection("‚úã MAIN DE D√âPART", "‚úã");
    std::cout << "   üìå PARTIE √Ä 2 JOUEURS:\n";
    std::cout << "      ‚Ä¢ Les 2 joueurs commencent avec 5 cartes\n\n";

    std::cout << "   üìå PARTIE √Ä 3 JOUEURS ET PLUS:\n";
    std::cout << "      ‚Ä¢ 1er joueur : 3 cartes üé¥üé¥üé¥\n";
    std::cout << "      ‚Ä¢ 2√®me joueur : 4 cartes üé¥üé¥üé¥üé¥\n";
    std::cout << "      ‚Ä¢ Autres joueurs : 5 cartes üé¥üé¥üé¥üé¥üé¥\n\n";

    std::cout << "   üí° Pourquoi cette diff√©rence ?\n";
    std::cout << "      Le premier joueur a un avantage tactique en jouant en premier.\n";
    std::cout << "      Commencer avec moins de cartes compense cet avantage.\n";

    afficherSection("‚öîÔ∏è  R√àGLES DE COMBAT", "‚öîÔ∏è");
    std::cout << "   ‚Ä¢ Vous pouvez attaquer TOUS les autres joueurs\n";
    std::cout << "   ‚Ä¢ Vous choisissez qui attaquer √† chaque utilisation de Combat\n";
    std::cout << "   ‚Ä¢ Vous pouvez r√©partir vos attaques entre plusieurs cibles\n";
    std::cout << "   ‚Ä¢ Exemple: Avec 6 ‚öîÔ∏è  Combat, vous pouvez:\n";
    std::cout << "      ‚Üí Attaquer le Joueur A pour 3 d√©g√¢ts\n";
    std::cout << "      ‚Üí Attaquer le Joueur B pour 2 d√©g√¢ts\n";
    std::cout << "      ‚Üí Attaquer un champion du Joueur C pour 1 d√©g√¢t\n";

    afficherSection("üõ°Ô∏è  CHAMPIONS GARDE", "üõ°Ô∏è");
    std::cout << "   ‚Ä¢ Si un joueur a des champions Garde üõ°Ô∏è  en jeu\n";
    std::cout << "   ‚Ä¢ Vous DEVEZ d'abord attaquer ces champions\n";
    std::cout << "   ‚Ä¢ Vous ne pouvez pas attaquer le joueur directement\n";
    std::cout << "   ‚Ä¢ Une fois tous les Gardes vaincus, vous pouvez attaquer le joueur\n";

    afficherSection("üèÜ CONDITION DE VICTOIRE", "üèÜ");
    std::cout << "   ‚Ä¢ Le dernier joueur en vie remporte la partie !\n";
    std::cout << "   ‚Ä¢ Si vous √™tes √©limin√© (0 PV), vous √™tes hors jeu\n";
    std::cout << "   ‚Ä¢ Vos cartes et champions restent visibles mais ne sont plus actifs\n";

    afficherSeparateur();
}

void Regle::afficherReglesBase() {
    std::cout << "\n";
    afficherTitre("üé¥ R√àGLES DE BASE üé¥");

    afficherSection("‚öîÔ∏è  TYPES DE CARTES", "‚öîÔ∏è");
    std::cout << "   üë§ CHAMPIONS:\n";
    std::cout << "      ‚Ä¢ Restent en jeu apr√®s avoir √©t√© jou√©s\n";
    std::cout << "      ‚Ä¢ Peuvent √™tre attaqu√©s par les adversaires\n";
    std::cout << "      ‚Ä¢ Ont des points de d√©fense (DEF)\n";
    std::cout << "      ‚Ä¢ Vont en d√©fausse quand vaincus (0 DEF)\n";
    std::cout << "      ‚Ä¢ Peuvent avoir des capacit√©s Expend (‚è∏Ô∏è)\n\n";

    std::cout << "   ‚ö° ACTIONS:\n";
    std::cout << "      ‚Ä¢ Effet imm√©diat quand jou√©es\n";
    std::cout << "      ‚Ä¢ Vont directement en d√©fausse apr√®s utilisation\n";
    std::cout << "      ‚Ä¢ G√©n√®rent souvent Or, Combat, ou effets sp√©ciaux\n\n";

    std::cout << "   üî® ITEMS:\n";
    std::cout << "      ‚Ä¢ Similaires aux Actions\n";
    std::cout << "      ‚Ä¢ Effet imm√©diat, vont en d√©fausse\n";
    std::cout << "      ‚Ä¢ Peuvent souvent √™tre sacrifi√©es pour un effet bonus\n";

    afficherSection("üåü FACTIONS", "üåü");
    std::cout << "   üõ°Ô∏è  IMPERIAL (Bleu): D√©fense et vie\n";
    std::cout << "   üèπ GUILD (Jaune): Or et acquisitions\n";
    std::cout << "   üíÄ NECROS (Vert): Sacrifice et pioche\n";
    std::cout << "   üê∫ WILD (Rouge): Combat et agressivit√©\n";
    std::cout << "   ‚ö™ NONE (Gris): Cartes de base neutres\n";

    afficherSection("ü§ù EFFETS ALLI√âS", "ü§ù");
    std::cout << "   ‚Ä¢ Activ√©s quand vous jouez une autre carte de la m√™me faction\n";
    std::cout << "   ‚Ä¢ Exemple: \"Alli√©: Gagnez +2 üí∞ or\"\n";
    std::cout << "   ‚Ä¢ Vous pouvez activer plusieurs effets Alli√©s dans un tour\n";

    afficherSection("üíÄ SACRIFICE", "üíÄ");
    std::cout << "   ‚Ä¢ Certaines cartes peuvent √™tre sacrifi√©es\n";
    std::cout << "   ‚Ä¢ La carte est retir√©e du jeu D√âFINITIVEMENT\n";
    std::cout << "   ‚Ä¢ Vous obtenez un effet puissant en √©change\n";
    std::cout << "   ‚Ä¢ Utilisez-le pour √©liminer les cartes faibles de votre deck\n";

    afficherSection("‚è∏Ô∏è  EXPEND (Champions)", "‚è∏Ô∏è");
    std::cout << "   ‚Ä¢ Capacit√© sp√©ciale d'un champion\n";
    std::cout << "   ‚Ä¢ Peut √™tre utilis√©e UNE FOIS par tour\n";
    std::cout << "   ‚Ä¢ Le champion devient \"√©puis√©\" (expended)\n";
    std::cout << "   ‚Ä¢ Se r√©initialise au d√©but de votre prochain tour\n";

    afficherSection("üõ°Ô∏è  GARDE", "üõ°Ô∏è");
    std::cout << "   ‚Ä¢ Champion avec la capacit√© Garde\n";
    std::cout << "   ‚Ä¢ Prot√®ge son propri√©taire\n";
    std::cout << "   ‚Ä¢ DOIT √™tre vaincu avant de pouvoir attaquer le joueur\n";
    std::cout << "   ‚Ä¢ Tr√®s important pour la d√©fense !\n";

    afficherSeparateur();
}

// ====== Utilitaires ======

int Regle::getCartesDepart(int position_joueur, int nb_joueurs_total) {
    // Partie √† 2 joueurs : tous commencent avec 5 cartes
    if (nb_joueurs_total == 2) {
        return 5;
    }

    // Partie √† 3+ joueurs :
    // Premier joueur : 3 cartes
    // Deuxi√®me joueur : 4 cartes
    // Autres : 5 cartes
    if (position_joueur == 1) {
        return 3;
    } else if (position_joueur == 2) {
        return 4;
    } else {
        return 5;
    }
}